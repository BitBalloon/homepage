Sites
=====

The `/sites` endpoint allows you to access the sites deployed on BitBalloon.


### <a name="get-sites"></a>Get Sites

* `GET /sites` will return all sites you have access to.

```javascript
[
  {
    "id":"3970e0fe-8564-4903-9a55-c5f8de49fb8b",
    "premium":false,
    "claimed":true,
    "name":"synergy",
    "custom_domain":"www.example.com",
    "url":"http://www.example.com",
    "admin_url":"https://www.bitballoon.com/sites/synergy",
    "screenshot_url":null,
    "created_at":"2013-09-17T05:13:08Z",
    "updated_at":"2013-09-17T05:13:19Z",
    "user_id":{"51f60d2d5803545326000005"},
  }
]
```

### <a name="get-site"></a> Get Site

* `GET /sites/3970e0fe-8564-4903-9a55-c5f8de49fb8b` will return the site from its ID
* `GET /sites/www.example.com` will return the site matching the domain `www.example.com`

```javascript
{
  "id":"3970e0fe-8564-4903-9a55-c5f8de49fb8b",
  "premium":false,
  "claimed":true,
  "name":"synergy",
  "custom_domain":"www.example.com",
  "notification_email:"me@example.com",
  "url":"http://www.example.com",
  "admin_url":"https://www.bitballoon.com/sites/synergy",
  "screenshot_url":null,
  "created_at":"2013-09-17T05:13:08Z",
  "updated_at":"2013-09-17T05:13:19Z",
  "user_id":{"51f60d2d5803545326000005"},
}
```


### <a name="create-site"></a>Create Site

Creating a site will initiate a new deploy. You can either create a new site with a list of files you intend to upload, or by posting a ZIP file.

### <a name="post-a-zip"></a>POST a ZIP file

* `POST /sites` with `zip=zip-file`. You must use `Content-Type: multipart/form-data` to send the zip file in a property called `zip`.

```javascript
{
  "id": "3970e0fe-8564-4903-9a55-c5f8de49fb8b",
  "subdomain": "some-autogenerated-subdomain",
  "url": "http://some-autogenerated-subdomain.bitballoon.com",
  "state": "processing",
  "required": []
}
```

This will return `201 Created` with the API URL for the new site in the `Location` header, along with a simplified JSON representation of the site. The site will be in the `processing` state and you can poll the URL in the `Location` header until the state has changed to either `ready` or `error`.

Here's an example of creating a new site from a zip file called `landing.zip` via Curl (assuming you've gone through the process to get an oauth access_token)

```bash
curl -F "zip=@landing.zip;type=application/zip" https://www.bitballoon.com/api/v1/sites?access_token={access_token}
```

### <a name="post-a-list"></a>POST a list of files

* `POST /sites` with `{files: {"/index.html": "SHA1_OF_YOUR_INDEX_HTML"}}` will create a new site in the `uploading` state. You must use `Content-Type: application/json`

The files object should contain all the files you wish to upload for this deploy, together with a SHA1 of the content of each file.

```javascript
{
  "id": "3970e0fe-8564-4903-9a55-c5f8de49fb8b",
  "subdomain": "some-autogenerated-subdomain",
  "url": "http://some-autogenerated-subdomain.bitballoon.com",
  "state": "uploading",
  "required": ["SHA1_OF_YOUR_INDEX_HTML"]
}
```

This will return `201 Created` with the API URL for the new site in the `Location` header, along with a simplified JSON representation of the site. The `required` property will give you a list of files you need to upload. BitBalloon will inspect the SHA1s you sent in the request. You'll only need to upload the files BitBalloon doesn't have on its servers. The `state` can be either `uploading` or `processing` depending on whether or not you need to upload any more files.

To upload any required files, use the `PUT /sites/{site_id}/files/{path}` endpoint for each file. Once all the files are uploaded, the processing of the site will begin.

### <a name="update-site"></a>Update Site

* `PATCH /sites/{site_id}` will let you update some attributes on a site
* `PUT /sites/{site_id}` will let you update some attributes on a site

This lets you update the `name`, `custom_domain`, `password` and `notification_email` fields of a site.

### <a name="destroy-site"></a>Destroy Site


* `DELETE /sites/{site_id}` will permanently delete a site
* `DELETE /sites/{site_domain}` will permanently delete a site

This will return `200 OK`.

